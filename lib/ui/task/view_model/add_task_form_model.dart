import '../../../domain/models/task.dart';
import '../../../domain/models/user.dart';

enum BoardStatus { urgent, running, ongoing }

class AddTaskFormModel {
  String taskName = '';
  List<User> selectedMembers = [];
  DateTime? selectedDate;
  String startTime = '';
  String endTime = '';
  BoardStatus boardStatus = BoardStatus.running;

  void reset() {
    taskName = '';
    selectedMembers.clear();
    selectedDate = null;
    startTime = '';
    endTime = '';
    boardStatus = BoardStatus.running;
  }

  Task toTask() {
    final now = DateTime.now();
    return Task(
      id: '', // Will be generated by repository
      title: taskName,
      description: '', // Not in the UI design, using empty string
      status: _mapBoardStatusToTaskStatus(boardStatus),
      priority: _mapBoardStatusToTaskPriority(boardStatus),
      projectId: '', // TODO: Need to select project - not in UI design
      assigneeId: selectedMembers.isNotEmpty ? selectedMembers.first.id : null,
      dueDate: selectedDate,
      createdAt: now,
      updatedAt: now,
    );
  }

  TaskStatus _mapBoardStatusToTaskStatus(BoardStatus boardStatus) {
    switch (boardStatus) {
      case BoardStatus.urgent:
        return TaskStatus.todo;
      case BoardStatus.running:
        return TaskStatus.inProgress;
      case BoardStatus.ongoing:
        return TaskStatus.inProgress;
    }
  }

  TaskPriority _mapBoardStatusToTaskPriority(BoardStatus boardStatus) {
    switch (boardStatus) {
      case BoardStatus.urgent:
        return TaskPriority.urgent;
      case BoardStatus.running:
        return TaskPriority.high;
      case BoardStatus.ongoing:
        return TaskPriority.medium;
    }
  }
}