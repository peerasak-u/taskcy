import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

import '../../../domain/models/project.dart';
import '../../../domain/models/task.dart';
import '../../../domain/models/user.dart';

enum BoardStatus { urgent, running, ongoing }

class AddTaskFormModel extends Equatable {
  final String taskName;
  final Project? selectedProject;
  final String description;
  final List<User> selectedMembers;
  final DateTime? selectedDate;
  final String startTime;
  final String endTime;
  final BoardStatus boardStatus;

  const AddTaskFormModel({
    this.taskName = '',
    this.selectedProject,
    this.description = '',
    this.selectedMembers = const [],
    this.selectedDate,
    this.startTime = '',
    this.endTime = '',
    this.boardStatus = BoardStatus.running,
  });

  AddTaskFormModel copyWith({
    String? taskName,
    Project? selectedProject,
    String? description,
    List<User>? selectedMembers,
    DateTime? selectedDate,
    String? startTime,
    String? endTime,
    BoardStatus? boardStatus,
  }) {
    return AddTaskFormModel(
      taskName: taskName ?? this.taskName,
      selectedProject: selectedProject ?? this.selectedProject,
      description: description ?? this.description,
      selectedMembers: selectedMembers ?? this.selectedMembers,
      selectedDate: selectedDate ?? this.selectedDate,
      startTime: startTime ?? this.startTime,
      endTime: endTime ?? this.endTime,
      boardStatus: boardStatus ?? this.boardStatus,
    );
  }

  @override
  List<Object?> get props => [
    taskName,
    selectedProject,
    description,
    selectedMembers,
    selectedDate,
    startTime,
    endTime,
    boardStatus,
  ];

  Task toTask() {
    final now = DateTime.now();
    
    // Combine selectedDate with startTime if available
    DateTime? finalDueDate = selectedDate;
    if (selectedDate != null && startTime.isNotEmpty) {
      final parsedTime = _parseTime(startTime);
      if (parsedTime != null) {
        finalDueDate = DateTime(
          selectedDate!.year,
          selectedDate!.month,
          selectedDate!.day,
          parsedTime.hour,
          parsedTime.minute,
        );
      }
    }
    
    return Task(
      id: '', // Will be generated by repository
      title: taskName,
      description: description,
      status: _mapBoardStatusToTaskStatus(boardStatus),
      priority: _mapBoardStatusToTaskPriority(boardStatus),
      projectId: selectedProject?.id ?? '',
      assigneeId: selectedMembers.isNotEmpty ? selectedMembers.first.id : null,
      dueDate: finalDueDate,
      createdAt: now,
      updatedAt: now,
    );
  }

  TimeOfDay? _parseTime(String timeString) {
    if (timeString.isEmpty) return null;
    
    try {
      final parts = timeString.split(' ');
      if (parts.length != 2) return null;
      
      final timePart = parts[0];
      final amPm = parts[1].toLowerCase();
      
      final timeComponents = timePart.split(':');
      if (timeComponents.length != 2) return null;
      
      int hour = int.parse(timeComponents[0]);
      final minute = int.parse(timeComponents[1]);
      
      if (amPm == 'pm' && hour != 12) {
        hour += 12;
      } else if (amPm == 'am' && hour == 12) {
        hour = 0;
      }
      
      return TimeOfDay(hour: hour, minute: minute);
    } catch (e) {
      return null;
    }
  }

  TaskStatus _mapBoardStatusToTaskStatus(BoardStatus boardStatus) {
    switch (boardStatus) {
      case BoardStatus.urgent:
        return TaskStatus.todo;
      case BoardStatus.running:
        return TaskStatus.inProgress;
      case BoardStatus.ongoing:
        return TaskStatus.inProgress;
    }
  }

  TaskPriority _mapBoardStatusToTaskPriority(BoardStatus boardStatus) {
    switch (boardStatus) {
      case BoardStatus.urgent:
        return TaskPriority.urgent;
      case BoardStatus.running:
        return TaskPriority.high;
      case BoardStatus.ongoing:
        return TaskPriority.medium;
    }
  }
}